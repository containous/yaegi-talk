Slide 0
-------

Hello, my name is Marc, I work at Containous as a software developer
and I'm happy today to present you Yaegi, Yet Another Elegant Go
Interpreter.

Slide 1
-------

What is the main motivation for Yaegi ?

To make go programs extensible, without having to rebuild or redeploy
them.

Many scripting engines exist in Go, for Javascript, Python, Lua,
Lisp, so on and so forth (and forth interpreter as well)

One language is missing, could you guess it ?

Slide 2
-------

So we decided to provide a Go interpreter, embeddable, simple,
secure and fast enough to be used as a plugin engine

We hope it's not a toy but really for production

For that we need to stick to Go specification (no more, no less)
we prioritize security and robustness over performance

It's not only about the interpreted code using the runtime, but
also about letting the runtime to use interpreted code as a package
provider

Finally it is also about leveraging and maintaining the integrity
and safety of the runtime

Slide 3
-------

To achieve this goals, here are some yaegi features:

- it depends only on stdlib
- etc

Slide 4
-------

To test yaegi in demanding conditions, we implemeted some middlewares
for the HTTP server, and run the same code with the middleware
compiled vs interpreted

We see that in the favorable cases we have less than 10% degradation

In the worst case to problem comes from the bcrypt algo wich is CPU
intensive slow in interpreted mode.

Running exactly the same code, but with the bcrypt pre-compiled and
exposed to interpreter solved the problem.

Slide 5
-------

So here it is for a first introduction of the Yaegi interpreter,
thank you very much for your attention.

If time permits, and if by chance some you are coders, I could show
you a couple of examples, etc....
