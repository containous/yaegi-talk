Yaegi

Yet Another Elegant Go Interpreter
3 jul 2019
Tags: go, interpreter, plugin

Marc Vertes
Software Developer, Containous
marc@containo.us
http://containo.us

*

.background yaegi_announce.png

: Hello, my name is Marc, I'm a software engineer at Containous, the company behind Traefik
: and I'm happy today to present you Yaegi, Yet Another Elegant Go Interpreter
: an opensource project that we are just announcing this week

* Motivation

- Make Go programs extensible

- Existing [[https://github.com/golang/go/wiki/Projects#virtual-machines-and-languages][script engines]] less fit than Go itself

- Unify scripting and implementation languages


: The main motivation for yaegi is to make Go programs extensible, without having to rebuild and redeploy them
: This may be obvious in gaming or science domains, where interpreters are common, but it is also important for distributed systems
: Existing script engines (lua, php, js, etc) are not the most adapted to exploit the Go runtime
: and in fact there is probably not a better candidate than Go itself
: A dynamic Go  would allow to unify scripting and implementation languages
: to remove the burden of syntax switch and the need to rewrite a slow module

* Goal and priorities

Provide a Go dynamic interpreter, embeddable, simple,
secure and fast enough to be used as a plugin engine.

For _production_

- Implement the Go language specification
- Security and robustness over performance
- performance: scripts access fast pre-compiled modules
- extensibility: compiled modules use script as if it was pre-compiled

: The goal is to provide a Go dynamic interpreter embeddable, simple, secure and fast enough to be used as plugin engine
: this is not a toy, it's for use in production
: so priorities are to stick to standard and implement the formal Go specification
: and to favor security over performance (no use of unsafe, syscalls)
: For interpreter performance, scripts should be able to use fast pre-compiled modules
: For application extensibility, compiled modules

* Performances

Assess Yaegi as a plugin engin for distributed systems

Benchmark [[https://github.com/nytimes/gziphandler][gziphandler]] in a web server compiled vs interpreted

    benchmark                    old ns/op      new ns/op       delta
    Compress-8                   769088         817632          +6.31%

Gzip is provided by compiled standard library, only the _glue_ is interpreted.

: We wanted to assess if Yaegi can be used as a plugin engine in distributed systems
: To answer that, we have benchmarked gziphandler, a middleware for compressing HTTP responses.
: gziphandler provides interface methods which implement compression for the HTTP server in stdlib.
: results are good because the compression itself is provided by stdlib. Only glue is interpreted.
: Interpreters work best at providing the glue language and offloading CPU intensive to optimized compiled libraries.

* Example 1

Hello World
.play -edit t1.go

* Example 2

Channels, goroutines, etc. are provided
.play -edit t3.go

* Example 3

A dynamic function in the static binary
.play -edit t5.go

* Yet Another Elegant Go Interpreter

- Open source project, Apache 2 license
- Contributions most welcome
- [[http://gitub.com/containous/yaegi]]

.image yaegi.png

: Thank you for assisting this presentation.
: Don't hesitate to get further details on the github site and play with the project.
: Again, it's opensource, and we would love to see your contributions
